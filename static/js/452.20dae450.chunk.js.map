{"version":3,"file":"static/js/452.20dae450.chunk.js","mappings":"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","sources":["webpack://social_network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social_network/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://social_network/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","utils/validators/validators.tsx","webpack://social_network/./src/components/common/FormsControls/FormControls.module.css?2a3b"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__LWz2p\",\"profileImg\":\"ProfileInfo_profileImg__ICjMc\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: FC<ProfileStatusPropsType> = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                < div>\r\n                    <span onDoubleClick={activateEditMode}> {props.status || '-----'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus onBlur={deactivateEditMode} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\nimport s from './ProfileInfo.module.css'\nimport {Preloader} from '../../common/preloader/Preloader';\nimport {ProfileType} from '../ProfileContainer';\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\n\ntype ProfileInfoPropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileInfo:React.FC<ProfileInfoPropsType> = (props) => {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={props.profile.photos.large} alt={'large avatar'}/>\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\n\n                <div><b>Full name:</b> <span>{props.profile.fullName}</span></div>\n                <div><b>About Me:</b> <span>{props.profile.aboutMe}</span></div>\n                <div><b>Looking For A Job:</b> <span>{props.profile.lookingForAJob}</span></div>\n                <div>{props.profile.lookingForAJobDescription}</div>\n                <br/>\n                <div><b>Contacts</b></div>\n                <div><b>Facebook:</b> <span>{props.profile.contacts.facebook}</span></div>\n                <div><b>Website:</b> <span>{props.profile.contacts.website}</span></div>\n                <div><b>VK:</b> <span>{props.profile.contacts.vk}</span></div>\n                <div><b>Twitter:</b> <span>{props.profile.contacts.twitter}</span></div>\n                <div><b>Instagram:</b> <span>{props.profile.contacts.instagram}</span></div>\n                <div><b>Youtube:</b> <span>{props.profile.contacts.youtube}</span></div>\n                <div><b>GitHub:</b> <span>{props.profile.contacts.github}</span></div>\n                <div><b>MainLink:</b> <span>{props.profile.contacts.mainLink}</span></div>\n\n\n            </div>\n        </div>\n    );\n};\n\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__RpqKX\",\"posts\":\"MyPosts_posts__ng7YU\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Pl1ou\"};","import React from 'react';\nimport s from './Post.module.css';\n\nexport type PostsType = {\n    id: number\n    message: string\n    likesCount: number\n}\n\nconst Post = (props: PostsType) => {\n\n    return (\n        <div className={s.item}>\n            <img src={'https://www.meme-arsenal.com/memes/be50e6ba99654b5455027dcc82beb5b3.jpg'} alt={'ava'}/>\n            { props.message }\n            <div>\n                <span>like</span> { props.likesCount }\n            </div>\n        </div>\n    );\n}\n\nexport default Post;","import React, {FC} from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../../../utils/validators/validators';\r\n\r\ntype MyPostFormPropsType = {\r\n    newPostText: string\r\n}\r\nconst maxLength10 = maxLengthCreator(10);\r\nconst AddNewPostForm: FC<InjectedFormProps<MyPostFormPropsType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={'newPostText'}\r\n                       validate={[required, maxLength10]}\r\n                       placeholder={'Post message'}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button type={'submit'}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const AddNewPostFormRedux = reduxForm<MyPostFormPropsType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post, {PostsType} from './Post/Post';\nimport {AddNewPostFormRedux} from './AddNewPostForm/AddNewPostForm';\n\ntype PropsType = {\n    posts: Array<PostsType>\n    messageForNewPost: string\n    addPost: (postMessage: string) => void\n}\n\nconst MyPosts = React.memo((props: PropsType) => {\n\n    const postsElements = [...props.posts]\n        .reverse()\n        .map(p => <Post key={p.id} id={p.id} message={p.message}\n                        likesCount={p.likesCount}/>)\n\n    const onAddPost = (values: { newPostText: string }) => {\n        props.addPost(values.newPostText)\n        values.newPostText = ''\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n\n    );\n})\n\nexport default MyPosts;","import MyPosts from './MyPosts';\nimport {connect} from 'react-redux';\nimport {RootStateType} from '../../../redux/redux-store';\nimport {Dispatch} from 'redux';\nimport {PostsType} from './Post/Post';\nimport {addPost} from '../../../redux/profile-reducer';\n\ntype mapStateToPropsType = {\n    posts: Array<PostsType>\n    messageForNewPost: string\n}\n\ntype mapDispatchToPropsType = {\n    addPost: (newPostText: string) => void\n}\n\n\nlet mapStateToProps = (state: RootStateType): mapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n        messageForNewPost: state.profilePage.messageForNewPost\n    }\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPost(newPostText))\n        },\n    }\n}\n\nconst MyPostsContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, RootStateType>(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;","import React from 'react';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\nimport {ProfileType} from './ProfileContainer';\n\ntype ProfilePropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst Profile = (props: ProfilePropsType) => {\n    return (\n        <div>\n            <ProfileInfo\n                profile={props.profile}\n                status={props.status}\n                updateStatus={props.updateStatus}/>\n            <MyPostsContainer/>\n        </div>\n    );\n}\n\nexport default Profile;","import React from 'react';\nimport Profile from './Profile';\nimport {connect} from 'react-redux';\nimport {RootStateType} from '../../redux/redux-store';\nimport {getStatus, getUserProfile, updateStatus} from '../../redux/profile-reducer';\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\nimport {compose} from 'redux';\n\nexport type ProfileType = {\n    aboutMe: string\n    contacts: ContactsType\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    userId: number\n    photos: PhotosType\n}\n\nexport type ContactsType = {\n    facebook: string\n    website: string\n    vk: string\n    twitter: string\n    instagram: string\n    youtube: string\n    github: string\n    mainLink: string\n}\n\nexport type PhotosType = {\n    small: string\n    large: string\n}\n\ntype MapStatePropsType = {\n    profile: ProfileType | null\n    status: string\n    authorizedUserId: number | null\n    isAuth: boolean\n}\n\ntype MapDispatchPropsType = {\n    getUserProfile: (userId: string) => void\n    getStatus: (status: string) => void\n    updateStatus: (status: string) => void\n}\n\ntype PathParamsType = {\n    userId: string,\n}\n\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\n\n\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\n\nclass ProfileContainer extends React.Component<PropsType> {\n    componentDidMount() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId?.toString() as string\n            if (!userId) {\n                this.props.history.push('/login');\n            }\n        }\n\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n    }\n\n    render() {\n\n        return (\n            <Profile {...this.props}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}/>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth,\n});\n\nexport default compose<React.ComponentType>(\n    connect<MapStatePropsType, MapDispatchPropsType, {}, RootStateType>(mapStateToProps, {\n        getUserProfile,\n        getStatus,\n        updateStatus\n    }),\n    withRouter,\n    withAuthRedirect,\n)(ProfileContainer);","import React from 'react';\r\nimport styles from './FormControls.module.css'\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\r\n\r\n    return (\r\n        <FormControl meta={meta}> <textarea {...input} {...restProps}/> </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\r\n    return (\r\n        <FormControl meta={meta}> <input {...input} {...restProps}/> </FormControl>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators: ((value: string) => string | undefined)[], component: React.FC<WrappedFieldProps>, props = {}, text = '') => (\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {RootStateType} from '../redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","export const required = (value: string) => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__8Dqnn\",\"error\":\"FormControls_error__qoW33\",\"formSummaryError\":\"FormControls_formSummaryError__pSOJC\"};"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","profile","className","s","src","photos","large","alt","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","Preloader","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","validate","required","placeholder","type","React","postsElements","posts","reverse","map","p","id","values","addPost","newPostText","connect","state","profilePage","messageForNewPost","dispatch","MyPosts","ProfileContainer","userId","this","match","params","authorizedUserId","toString","history","push","getUserProfile","getStatus","compose","auth","isAuth","withRouter","withAuthRedirect","FormControl","meta","touched","error","children","hasError","styles","input","restProps","Input","createField","validators","text","mapStateToProps","Component","to","maxLength","length"],"sourceRoot":""}