{"version":3,"file":"static/js/71.7099d828.chunk.js","mappings":"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","sources":["webpack://social_network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","../node_modules/@ant-design/icons-svg/es/asn/DownloadOutlined.js","../node_modules/@ant-design/icons/es/icons/DownloadOutlined.js","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social_network/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://social_network/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://social_network/./src/components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.module.css?bb6c","components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://social_network/./src/components/Profile/Profile.module.css?b512","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","utils/validators/validators.tsx","webpack://social_network/./src/components/common/FormsControls/FormControls.module.css?2a3b"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__LWz2p\",\"profileImg\":\"ProfileInfo_profileImg__ICjMc\",\"mainPhoto\":\"ProfileInfo_mainPhoto__GLwQL\",\"contact\":\"ProfileInfo_contact__xRTMr\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\nimport {Input} from 'antd';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: FC<ProfileStatusPropsType> = (props) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                < div>\r\n                    <b>Status:</b> <span onDoubleClick={activateEditMode}> {props.status || '-----'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <Input onChange={onStatusChange} autoFocus onBlur={deactivateEditMode} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport {createField, Input, Textarea} from '../../common/FormsControls/FormsControls';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport s from './ProfileInfo.module.css'\r\nimport style from '../../common/FormsControls/FormControls.module.css';\r\nimport {ProfileType} from '../ProfileContainer';\r\nimport {Button} from 'antd';\r\n\r\nconst ProfileDataForm = (props: InjectedFormProps<ProfileType>) => {\r\n    const {handleSubmit, initialValues, error} = props\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <Button type=\"default\" shape=\"round\" onClick={handleSubmit}>save</Button>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n        </div>\r\n        <div>\r\n            <b>Full name: </b> {createField('Full name', 'fullName', [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking For A Job: </b> {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n        </div>\r\n\r\n        <div>\r\n            <b>My professional\r\n                skills: </b> {createField('My professional skills', 'lookingForAJobDescription', [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me: </b> {createField('About me', 'aboutMe', [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts: </b> {Object.keys(initialValues.contacts ?? {}).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","// This icon file is generated automatically.\nvar DownloadOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M505.7 661a8 8 0 0012.6 0l112-141.7c4.1-5.2.4-12.9-6.3-12.9h-74.1V168c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v338.3H400c-6.7 0-10.4 7.7-6.3 12.9l112 141.8zM878 626h-60c-4.4 0-8 3.6-8 8v154H214V634c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v198c0 17.7 14.3 32 32 32h684c17.7 0 32-14.3 32-32V634c0-4.4-3.6-8-8-8z\" } }] }, \"name\": \"download\", \"theme\": \"outlined\" };\nexport default DownloadOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport DownloadOutlinedSvg from \"@ant-design/icons-svg/es/asn/DownloadOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar DownloadOutlined = function DownloadOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: DownloadOutlinedSvg\n  }));\n};\n\nDownloadOutlined.displayName = 'DownloadOutlined';\nexport default /*#__PURE__*/React.forwardRef(DownloadOutlined);","import React, {useRef, useState} from 'react';\nimport s from './ProfileInfo.module.css'\nimport {Preloader} from '../../common/preloader/Preloader';\nimport {ContactsType, ProfileType} from '../ProfileContainer';\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\nimport userPhoto from '../../../assets/images/user.png';\nimport ProfileDataForm from './ProfileDataForm';\nimport {Button} from 'antd';\nimport {DownloadOutlined} from '@ant-design/icons';\n\ntype ProfileInfoPropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: string) => void\n    saveProfile: (profile: ProfileType | null) => void\n}\n\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({\n                                                         profile,\n                                                         status,\n                                                         updateStatus,\n                                                         isOwner,\n                                                         savePhoto,\n                                                         saveProfile\n                                                     }) => {\n    const ref = useRef<HTMLInputElement>(null);\n\n    const [editMode, setEditMode] = useState(false);\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onMainPhotoSelected = (e: { target: any }) => {\n        if (e.target.files.length) {\n            savePhoto(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (formData: ProfileType | null) => {\n        saveProfile(formData)\n        setEditMode(false)\n    }\n\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto} alt={'large avatar'}/>\n                <div>\n                    <Button\n                        type=\"default\"\n                        shape=\"circle\"\n                        icon={<DownloadOutlined/>}\n                        onClick={() => ref.current?.click()}\n                    />\n                </div>\n                {isOwner &&\n                    <input\n                        type={'file'}\n                        onChange={onMainPhotoSelected}\n                        ref={ref}\n                        style={{display: 'none'}}\n                    />\n                }\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n                {editMode\n                    ? <ProfileDataForm initialValues={profile} onSubmit={onSubmit}/>\n                    : <ProfileData goToEditMode={() => {\n                        setEditMode(true)\n                    }} profile={profile} isOwner={isOwner}/>}\n            </div>\n        </div>\n    );\n};\n\ntype ContactType = {\n    contactTitle: string\n    contactValue: string\n}\n\ntype ProfileDataType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}\n\nconst ProfileData: React.FC<ProfileDataType> = ({profile, isOwner, goToEditMode}) => {\n    return <div>\n        {isOwner && <div>\n            <Button type=\"default\" shape=\"round\" onClick={goToEditMode}>edit</Button>\n        </div>}\n        <div>\n            <b>Full name: </b> {profile.fullName}\n        </div>\n        <div>\n            <b>Looking For A Job: </b>{profile.lookingForAJob ? 'yes' : 'no'}\n        </div>\n        {profile.lookingForAJob &&\n            <div>\n                <b>My professional skills: </b> {profile.lookingForAJobDescription}\n            </div>}\n        <div>\n            <b>About Me: </b> {profile.aboutMe}\n        </div>\n        <div>\n            <b>Contacts: </b> {Object.keys(profile.contacts).map(key => {\n\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\n        })}\n        </div>\n    </div>\n}\n\nconst Contact: React.FC<ContactType> = ({contactTitle, contactValue}) => {\n    return <div className={s.contact}><b>{contactTitle}: </b> {contactValue}</div>\n}\n\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__RpqKX\",\"posts\":\"MyPosts_posts__ng7YU\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Pl1ou\"};","import React from 'react';\nimport s from './Post.module.css';\n\nexport type PostsType = {\n    id: number\n    message: string\n    likesCount: number\n}\n\nconst Post = (props: PostsType) => {\n\n    return (\n        <div className={s.item}>\n            <img src={'https://www.meme-arsenal.com/memes/be50e6ba99654b5455027dcc82beb5b3.jpg'} alt={'ava'}/>\n            { props.message }\n            <div>\n                <span>like</span> { props.likesCount }\n            </div>\n        </div>\n    );\n}\n\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"AddNewPostForm_container__M++CF\"};","import React, {FC} from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../../../utils/validators/validators';\r\nimport {Button} from 'antd';\r\nimport styles from './AddNewPostForm.module.css'\r\n\r\ntype MyPostFormPropsType = {\r\n    newPostText: string\r\n}\r\nconst maxLength30 = maxLengthCreator(30);\r\nconst AddNewPostForm: FC<InjectedFormProps<MyPostFormPropsType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={styles.container}>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={'newPostText'}\r\n                    validate={[required, maxLength30]}\r\n                    placeholder={'Post message'}\r\n                    rows={3}\r\n                />\r\n                <div>\r\n                    <Button htmlType={'submit'} type={'default'} shape={'round'}>Add post</Button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const AddNewPostFormRedux = reduxForm<MyPostFormPropsType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post, {PostsType} from './Post/Post';\nimport {AddNewPostFormRedux} from './AddNewPostForm/AddNewPostForm';\n\ntype PropsType = {\n    posts: Array<PostsType>\n    messageForNewPost: string\n    addPost: (postMessage: string) => void\n}\n\nconst MyPosts = React.memo((props: PropsType) => {\n\n    const postsElements = [...props.posts]\n        .reverse()\n        .map(p => <Post key={p.id} id={p.id} message={p.message}\n                        likesCount={p.likesCount}/>)\n\n    const onAddPost = (values: { newPostText: string }) => {\n        props.addPost(values.newPostText)\n        values.newPostText = ''\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n\n    );\n})\n\nexport default MyPosts;","import MyPosts from './MyPosts';\nimport {connect} from 'react-redux';\nimport {RootStateType} from '../../../redux/redux-store';\nimport {Dispatch} from 'redux';\nimport {PostsType} from './Post/Post';\nimport {addPost} from '../../../redux/profile-reducer';\n\ntype mapStateToPropsType = {\n    posts: Array<PostsType>\n    messageForNewPost: string\n}\n\ntype mapDispatchToPropsType = {\n    addPost: (newPostText: string) => void\n}\n\n\nlet mapStateToProps = (state: RootStateType): mapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n        messageForNewPost: state.profilePage.messageForNewPost\n    }\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPost(newPostText))\n        },\n    }\n}\n\nconst MyPostsContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, RootStateType>(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Profile_container__T25qG\"};","import React from 'react';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\nimport {ProfileType} from './ProfileContainer';\nimport styles from './Profile.module.css'\n\ntype ProfilePropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: string) => void\n    saveProfile: (profile: ProfileType | null) => void\n}\n\nconst Profile = (props: ProfilePropsType) => {\n    return (\n        <div className={styles.container}>\n            <ProfileInfo\n                savePhoto={props.savePhoto}\n                isOwner={props.isOwner}\n                profile={props.profile}\n                status={props.status}\n                saveProfile={props.saveProfile}\n                updateStatus={props.updateStatus}/>\n            <MyPostsContainer/>\n        </div>\n    );\n}\n\nexport default Profile;","import React from 'react';\nimport Profile from './Profile';\nimport {connect} from 'react-redux';\nimport {RootStateType} from '../../redux/redux-store';\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from '../../redux/profile-reducer';\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\nimport {compose} from 'redux';\n\nexport type ProfileType = {\n    aboutMe: string\n    contacts: ContactsType\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    userId: number\n    photos: PhotosType\n}\n\nexport type ContactsType = {\n    facebook: string\n    website: string\n    vk: string\n    twitter: string\n    instagram: string\n    youtube: string\n    github: string\n    mainLink: string\n}\n\nexport type PhotosType = {\n    small: string\n    large: string\n}\n\ntype MapStatePropsType = {\n    profile: ProfileType | null\n    status: string\n    authorizedUserId: number | null\n    isAuth: boolean\n}\n\ntype MapDispatchPropsType = {\n    getUserProfile: (userId: number | null) => void\n    getStatus: (status: string) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: string) => void\n    saveProfile: (profile: ProfileType | null) => void\n}\n\ntype PathParamsType = {\n    userId: string\n}\n\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\n\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    refreshProfile() {\n        let userId: string | undefined = this.props.match.params.userId;\n        if (!userId) {\n\n            userId = this.props.authorizedUserId?.toString()\n            if (!userId) {\n              return this.props.history.push('/login');\n            }\n        }\n\n\n        this.props.getUserProfile(Number(userId))\n        this.props.getStatus(userId)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\n            this.refreshProfile()\n    }\n\n    render() {\n\n        return (\n            <Profile {...this.props}\n                     isOwner={!this.props.match.params.userId}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth,\n});\n\nexport default compose<React.ComponentType>(\n    connect<MapStatePropsType, MapDispatchPropsType, {}, RootStateType>(mapStateToProps, {\n        getUserProfile,\n        getStatus,\n        updateStatus,\n        savePhoto,\n        saveProfile,\n    }),\n    withRouter,\n    withAuthRedirect,\n)(ProfileContainer);","import React from 'react';\r\nimport styles from './FormControls.module.css'\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\r\n\r\n    return (\r\n        <FormControl meta={meta}> <textarea {...input} {...restProps}/> </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\r\n    return (\r\n        <FormControl meta={meta}> <input {...input} {...restProps}/> </FormControl>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators: ((value: string) => string | undefined)[], component: React.FC<WrappedFieldProps>, props = {}, text = '') => (\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {RootStateType} from '../redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","export const required = (value: string) => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__8Dqnn\",\"error\":\"FormControls_error__qoW33\",\"formSummaryError\":\"FormControls_formSummaryError__pSOJC\"};"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","reduxForm","form","handleSubmit","initialValues","error","onSubmit","type","shape","onClick","className","style","createField","Input","Textarea","Object","keys","contacts","map","key","s","DownloadOutlined","ref","React","AntdIcon","_objectSpread","icon","DownloadOutlinedSvg","displayName","ProfileData","profile","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","savePhoto","saveProfile","useRef","Preloader","src","photos","large","userPhoto","alt","current","click","target","files","length","display","formData","message","likesCount","maxLength30","maxLengthCreator","AddNewPostFormRedux","styles","Field","component","name","validate","required","placeholder","rows","htmlType","postsElements","posts","reverse","p","id","values","addPost","newPostText","connect","state","profilePage","messageForNewPost","dispatch","MyPosts","ProfileContainer","userId","this","match","params","authorizedUserId","toString","history","push","getUserProfile","Number","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter","withAuthRedirect","FormControl","meta","touched","children","hasError","input","restProps","validators","text","mapStateToProps","Component","to","maxLength"],"sourceRoot":""}