{"version":3,"file":"static/js/944.ff60f7be.chunk.js","mappings":"oNAiCMA,GAAiBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,SAA/BD,EAjBsC,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,MACzE,OACI,kBAAMC,SAAUF,EAAhB,WACKG,EAAAA,EAAAA,IAAY,QAAS,QAAS,CAACC,EAAAA,GAAWC,EAAAA,KAC1CF,EAAAA,EAAAA,IAAY,WAAY,WAAY,CAACC,EAAAA,GAAWC,EAAAA,GAAO,CAACC,KAAM,cAC9DH,EAAAA,EAAAA,IAAY,KAAM,aAAc,GAAIE,EAAAA,GAAO,CAACC,KAAM,YAAa,eAE/DL,IAAS,gBAAKM,UAAWC,EAAAA,EAAAA,iBAAhB,SACLP,KAEL,0BACI,8CAqChB,WAAeQ,EAAAA,EAAAA,KAJS,SAACC,GAAD,MAAgD,CACpEC,OAAQD,EAAME,KAAKD,UAGiF,CAACE,MAAAA,EAAAA,IAAzG,EA7BgE,SAACC,GAK7D,OAAIA,EAAMH,QACC,SAAC,KAAD,CAAUI,GAAI,cAIrB,4BACI,mCACA,SAAClB,EAAD,CAAgBK,SAXP,SAACc,GACdF,EAAMD,MAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG,sB,0MC7BnDC,EAA8C,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASrB,EAAsB,EAAtBA,MAAQsB,EAAc,EAAdA,SAE3EC,EAAWF,GAAWrB,EAC5B,OACI,iBAAKM,UAAWkB,EAAAA,EAAAA,YAAqB,KAAOD,EAAWC,EAAAA,EAAAA,MAAe,IAAtE,WACI,yBACKF,IAEJC,IAAY,0BAAOvB,QAKnByB,EAAwC,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,MAAON,EAAwB,EAAxBA,KAASO,GAAe,YAElF,OACI,UAACR,EAAD,CAAaC,KAAMA,EAAnB,eAA0B,uCAAcM,GAAWC,IAAnD,QAIKvB,EAAqC,SAAC,GAAiC,IAAhCsB,EAA+B,EAA/BA,MAAON,EAAwB,EAAxBA,KAASO,GAAe,YAC/E,OACI,UAACR,EAAD,CAAaC,KAAMA,EAAnB,eAA0B,oCAAWM,GAAWC,IAAhD,QAIKzB,EAAc,SAAC0B,EAA4BC,EAAcC,EAAuDC,GAAlG,IAA0IlB,EAA1I,uDAAkJ,GAAImB,EAAtJ,uDAA6J,GAA7J,OACvB,4BACI,SAAC,KAAD,QAAOJ,YAAaA,EACbC,KAAMA,EACNI,SAAUH,EACVC,UAAWA,GACPlB,IALf,IAMQmB,O,4ECzCL,IAAM7B,EAAW,SAAC+B,GACrB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,kBCLlC,KAAgB,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB","sources":["components/Login/Login.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.tsx","webpack://social_network/./src/components/common/FormsControls/FormControls.module.css?2a3b"],"sourcesContent":["import React, {FC} from 'react';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {createField, Input} from '../common/FormsControls/FormsControls';\r\nimport {required} from '../../utils/validators/validators';\r\nimport {connect} from 'react-redux';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {RootStateType} from '../../redux/redux-store';\r\nimport style from '../common/FormsControls/FormControls.module.css'\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField('Email', 'email', [required], Input)}\r\n            {createField('Password', 'password', [required], Input, {type: 'password'})}\r\n            {createField(null, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\r\n\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\nconst Login: FC<MapStateToPropsType & MapDispatchToPropsType> = (props) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe);\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateType>(mapStateToProps, {login})(Login);","import React from 'react';\r\nimport styles from './FormControls.module.css'\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\r\n\r\n    return (\r\n        <FormControl meta={meta}> <textarea {...input} {...restProps}/> </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\r\n    return (\r\n        <FormControl meta={meta}> <input {...input} {...restProps}/> </FormControl>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators: ((value: string) => string | undefined)[], component: React.FC<WrappedFieldProps>, props = {}, text = '') => (\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)","export const required = (value: string) => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__8Dqnn\",\"error\":\"FormControls_error__qoW33\",\"formSummaryError\":\"FormControls_formSummaryError__pSOJC\"};"],"names":["LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","createField","required","Input","type","className","style","connect","state","isAuth","auth","login","props","to","formData","email","password","rememberMe","FormControl","meta","touched","children","hasError","styles","Textarea","input","restProps","placeholder","name","validators","component","text","validate","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}