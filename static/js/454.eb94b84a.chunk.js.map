{"version":3,"file":"static/js/454.eb94b84a.chunk.js","mappings":"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","sources":["webpack://social_network/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.module.css","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","utils/validators/validators.tsx","webpack://social_network/./src/components/common/FormsControls/FormControls.module.css?2a3b"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__4VZML\",\"dialogsItems\":\"Dialogs_dialogsItems__P7bYT\",\"active\":\"Dialogs_active__neLxr\",\"messages\":\"Dialogs_messages__5CmT2\",\"message\":\"Dialogs_message__2yEf1\",\"avatar\":\"Dialogs_avatar__74mG7\"};","import React from 'react';\nimport s from './../Dialogs.module.css'\nimport {NavLink} from 'react-router-dom';\n\nexport type DialogsType = {\n    id: number\n    name: string\n    avatar: string\n}\n\nconst DialogItem = (props: DialogsType) => {\n    let path = '/dialogs/' + props.id\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <img className={s.avatar} src={props.avatar} alt={'avatar'}/>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\nexport default DialogItem;","import React from 'react';\nimport s from './../Dialogs.module.css'\n\nexport type MessageType = {\n    id: string\n    message: string\n}\n\nconst Message = (props: MessageType) => {\n    return (\n        <div className={s.message}>\n            {props.message}\n        </div>\n    )\n}\n\nexport default Message;","// extracted by mini-css-extract-plugin\nexport default {};","import {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport React, {FC} from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\nimport {Button} from 'antd';\r\nimport styles from './AddMessageForm.module.css'\r\n\r\ntype DialogsFormPropsType = {\r\n    newMessageBody: string\r\n}\r\nconst maxLength50 = maxLengthCreator(50);\r\nconst AddMessageForm: FC<InjectedFormProps<DialogsFormPropsType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={styles.container}>\r\n                <Field component={Textarea}\r\n                       name={'newMessageBody'}\r\n                       validate={[required, maxLength50]}\r\n                       placeholder={'Enter your message'}\r\n                       row={3}\r\n                />\r\n                <div>\r\n                    <Button type={'default'} shape={'round'} htmlType={'submit'}>Send</Button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const AddMessageFormRedux = reduxForm<DialogsFormPropsType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from 'react';\nimport s from './Dialogs.module.css'\nimport DialogItem, {DialogsType} from './DialogItem/DialogItem';\nimport Message, {MessageType} from './Message/Message';\nimport {Redirect} from 'react-router-dom';\nimport {AddMessageFormRedux} from './AddMessageForm/AddMessageForm';\n\ntype DialogsPageType = {\n    dialogs: Array<DialogsType>\n    messages: Array<MessageType>\n    newMessageBody: string\n    sendMessage: (values: string) => void\n    isAuth: boolean\n}\n\nconst Dialogs = (props: DialogsPageType) => {\n\n    let dialogsElements = props.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id} avatar={d.avatar}/>);\n\n    let messagesElements = props.messages.map(m => <Message key={m.id} id={m.id} message={m.message}/>);\n\n    let addNewMessage = (values: { newMessageBody: string }) => {\n        props.sendMessage(values.newMessageBody);\n        values.newMessageBody = '';\n    }\n\n    if (!props.isAuth) return <Redirect to={'/login'}/>;\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div>{messagesElements}</div>\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\n            </div>\n        </div>\n    );\n};\n\n\nexport default Dialogs;","import {sendMessageAC} from '../../redux/dialogs-reducer';\nimport Dialogs from './Dialogs';\nimport {connect} from 'react-redux';\nimport {RootStateType} from '../../redux/redux-store';\nimport {compose, Dispatch} from 'redux';\nimport {DialogsType} from './DialogItem/DialogItem';\nimport {MessageType} from './Message/Message';\nimport React from 'react';\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\n\ntype mapStateToPropsType = {\n    dialogs: Array<DialogsType>,\n    messages: Array<MessageType>,\n    isAuth: boolean,\n}\n\ntype mapDispatchToPropsType = {\n    sendMessage: (newMessageBody: string) => void,\n}\n\nlet mapStateToProps = (state: RootStateType): mapStateToPropsType => {\n    return {\n        dialogs: state.dialogsPage.dialogs,\n        messages: state.dialogsPage.messages,\n        isAuth: state.auth.isAuth,\n    }\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n    return {\n        sendMessage: (newMessageBody) => {\n            dispatch(sendMessageAC(newMessageBody))\n        }\n    }\n}\n\nexport default compose<React.ComponentType>(\n    withAuthRedirect,\n    connect<mapStateToPropsType, mapDispatchToPropsType, {}, RootStateType>(mapStateToProps, mapDispatchToProps),\n)(Dialogs);","import React from 'react';\r\nimport styles from './FormControls.module.css'\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\r\n\r\n    return (\r\n        <FormControl meta={meta}> <textarea {...input} {...restProps}/> </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\r\n    return (\r\n        <FormControl meta={meta}> <input {...input} {...restProps}/> </FormControl>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators: ((value: string) => string | undefined)[], component: React.FC<WrappedFieldProps>, props = {}, text = '') => (\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {RootStateType} from '../redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","export const required = (value: string) => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__8Dqnn\",\"error\":\"FormControls_error__qoW33\",\"formSummaryError\":\"FormControls_formSummaryError__pSOJC\"};"],"names":["props","path","id","className","s","src","avatar","alt","to","name","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","styles","Field","component","Textarea","validate","required","placeholder","row","type","shape","htmlType","dialogsElements","dialogs","map","d","messagesElements","messages","m","isAuth","values","sendMessage","newMessageBody","compose","withAuthRedirect","connect","state","dialogsPage","auth","dispatch","sendMessageAC","Dialogs","FormControl","meta","touched","error","children","hasError","input","restProps","Input","createField","validators","text","mapStateToProps","Component","value","maxLength","length"],"sourceRoot":""}